https://leetcode.com/problems/minimum-path-sum/
//dfs
class Solution {
    public int minPathSum(int[][] grid) {
        Integer[][] dp = new Integer[grid.length][grid[0].length];
        
        int res = minPath(grid,0,0,dp);
        return res;
    }

    public int minPath(int[][] grid,int r,int c,Integer[][] dp){
        if(r==grid.length-1 && c==grid[0].length-1)
            return grid[r][c];
        
        if(r>=grid.length || c>=grid[0].length)
            return Integer.MAX_VALUE;

        if(dp[r][c]!=null)
            return dp[r][c];

        int h = minPath(grid,r,c+1,dp);
        int v = minPath(grid,r+1,c,dp);


        dp[r][c] =  grid[r][c] + Math.min(h,v);

        return dp[r][c];

    }
}
//we can directly use grid as dp as well 
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        
        // Create a dp table to store the minimum sum path to each cell
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        
        // Fill the first row
        for (int i = 1; i < n; i++) {
            dp[0][i] = dp[0][i-1] + grid[0][i];
        }
        
        // Fill the first column
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i-1][0] + grid[i][0];
        }
        
        // Fill the rest of the dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}