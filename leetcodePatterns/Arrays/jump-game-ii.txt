https://leetcode.com/problems/jump-game-ii/description/
class Solution {

    public int jump(int[] nums) {
        int currentEnd=0,currentFarthest=0,jumps=0;

        for(int i=0;i<nums.length-1;i++)
        {
            //currentFarthest means how far we can go
            //so we start at i=0 and nums[i] = 2 so the distance we can go is upto the 2 index
            currentFarthest=Math.max(currentFarthest,i+nums[i]);
            //when we reach the current end means we have covered all cases till now
            if(i==currentEnd)
            {
                ++jumps;
                //changing the currentEnd to how far we can reach
                currentEnd=currentFarthest;
            }

        }
        return jumps;
        
    }
    
}

// class Solution {
//     int min=Integer.MAX_VALUE;
//     public int jump(int[] nums) {
//         if(nums.length==1)
//         return 0;
//         recursion(nums,0,nums[0],1);
//         return min;
        
//     }
//     //TLE with recursion
//     private void recursion(int[] nums,int start,int end,int count)
//     {
//         if(end >=nums.length-1)
//         {
//             min=Math.min(count,min);
//             return;
//         }
//         for(int j=start+1;j<=end;j++)
//         {
//             recursion(nums,j,j+nums[j],count+1);
//         }

//     }
// }