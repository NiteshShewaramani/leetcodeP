class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        boolean ranges[] = new boolean[nums.length + 1];
        for (int num : nums) {
            ranges[num] = true;
        }
        List<Integer> out = new ArrayList<>();
        for (int i = 1; i < ranges.length; i++) {
            if (ranges[i] == false) {
                out.add(i);
            }
        }
        return out;
    }
}

https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        int range = nums.length;
        int arr[] = new int[nums.length];
        List<Integer> a = new LinkedList<>();
        //frequency count 
        for(int i=0;i<nums.length;i++)
        {
           ++ arr[nums[i] - 1] ;
        }
        //arr[i]==0 means elements is missing
        for(int k=0;k<nums.length;k++)
        {
            if(arr[k] == 0)
                a.add(k + 1);
        }
        return a;
    }
}