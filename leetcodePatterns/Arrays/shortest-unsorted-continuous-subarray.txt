https://leetcode.com/problems/shortest-unsorted-continuous-subarray/
/**
Find the leftmost number X which is NOT in the correct position
This means X is larger than at least one of the numbers to its right
(if it were in correct position, it would be smaller than all numbers to its right)
X will definitely larger than MIN to its right
We traverse from right to left to find this number X
Find the rightmost number Y which is NOT in the correct position
This means Y is less than at least one of the numbers to its left
(if it were in correct position, it would be larger than all numbers to its left)
Y will definitely less than MAX to its left
We traverse from left to right to find this number Y
[X to Y] will be the answer
 */
public class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int left = 0, right = -1;
        
        /// Find the rightmost number which is not in the correct potsition
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if(nums[i] < max) right = i;
            max = Math.max(max, nums[i]);
        }
        
        /// Find the leftmost number which is not in the correct potsition
        int min = nums[nums.length - 1];
        for (int j = nums.length - 2; j >= 0; j--) {
            if(nums[j] > min) left = j;
            min = Math.min(min, nums[j]);
        }
        
        return right - left + 1;
    }
}