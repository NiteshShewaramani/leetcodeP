https://leetcode.com/problems/majority-element/description/
class Solution {

    //Moore Voting Algorithm only works with n/2 majority
    //1ms
    /**
    explaination : https://leetcode.com/problems/majority-element/solutions/3676530/3-method-s-beats-100-c-java-python-beginner-friendly/
     */
    public int majorityElement(int[] nums) {
        int count=0;
        int candidate=0;
        for(int n:nums)
        {
            if(count == 0)
            {
                candidate=n;
            }
            
            if(candidate==n)
            ++count;
            else
            --count;

        }
        return candidate;
    }

    //since the majority element appears n/2 time sort
    //and return n/2 element
    public int majorityElementSort(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];
    }




    //hashmap frequency count
    public int majorityElementFrequencyCount(int[] nums) {
        HashMap<Integer,Integer> count =new HashMap();
        for(int n:nums){
            int currentCount = count.getOrDefault(n,0);
            count.put(n,currentCount+1);
        }
        int max=0,maxvalue=0;
        for(Map.Entry<Integer,Integer> entry: count.entrySet())
        {
            if(entry.getValue()>max)
            {
                max=entry.getValue();
                maxvalue=entry.getKey();
            }

        }
        return maxvalue;
        
    }
}