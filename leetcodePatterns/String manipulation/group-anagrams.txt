https://leetcode.com/problems/group-anagrams
//optimised solution
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> answer = new ArrayList<>();
        if(strs==null || strs.length==0)
        return answer;
        
        HashMap<String,List<String>> map=new HashMap<>();
        for(String s : strs)
        {
            //char type 0~127 is enough for constraint 0 <= strs[i].length <= 100
            //char array to String is really fast, thanks @legendaryengineer
            //You should use other data type when length of string is longer.
            //E.g. Use byte (-128 to 127), short (-32,768 to 32,767),
            //int. -2,147,483,648 to 2,147,483,647
            char[] frequency = new char[26];
            for(int k=0;k<s.length();k++)
            {
                frequency[s.charAt(k)-'a']++;
            }
            //6 ms use char(0~127) array and new String(frequencyArr) method.
            //17ms when use byte (-128 to 127) array and Arrays.toString(frequencyArr) method
            //29ms when use int(-2,147,483,648 to 2,147,483,647) and Arrays.toString(frequencyArr) method
            String value=new String(frequency);

            List<String> temp = map.getOrDefault(value,new ArrayList());
            temp.add(s);
            map.put(value,temp);

        }
        return new LinkedList<>(map.values());
        
    }
}
//own solution brute fource
List<List<String>> answer = new ArrayList<>();
        boolean[] visited=new boolean[strs.length];
        if(strs==null || strs.length==0)
        return answer;
        if(strs.length==1)
        {
            List<String> temp=new ArrayList();
            temp.add(strs[0]);
            answer.add(temp);
            return answer;
        }

        int arr1[]=new int[26];
        int arr2[]=new int[26];


        for(int i=0;i<strs.length;i++)
        {
            if(visited[i])
            continue;

            visited[i]=true;
            String s1=strs[i];
            List<String> temp=new ArrayList();
            temp.add(s1);
            for(int k=0;k<s1.length();k++)
            {
                arr1[s1.charAt(k)-97]++;
            }
            

            for(int j=i+1;j<strs.length;j++)
            {
                String s2=strs[j];
                if(s1.length()==s2.length())
                {
                    for(int k=0;k<s2.length();k++)
                    {
                        arr2[s2.charAt(k)-97]++;
                    }
                    boolean same=true;
                    for(int k=0;k<26;k++)
                    {
                        if(arr1[k]!=arr2[k])
                        {
                            same=false;
                            break;
                        }
                    }
                    if(same)
                    {
                        temp.add(s2);
                        visited[j]=true;
                    } 
                    Arrays.fill(arr2,0);                   
                }

            }
            answer.add(temp);
            Arrays.fill(arr1,0);

        }
        return answer;