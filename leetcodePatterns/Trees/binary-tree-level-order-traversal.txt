https://leetcode.com/problems/binary-tree-level-order-traversal/description/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 class Solution {
     List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        if(root==null)
        return ans;
        dfs(root,0);
        return ans;
    }
    private void dfs(TreeNode node,int level)
    {
        if(node==null)
        return;

        if(ans.size()==level)
        {
            //the first time we find an element in the level we create a 
            //new list 
            ans.add(new ArrayList<>());
        }
        //we add the elemnt on its level
        ans.get(level).add(node.val);

        dfs(node.left,level+1);
        dfs(node.right,level+1);

    }
}
// class Solution {
//     public List<List<Integer>> levelOrder(TreeNode root) {
//         List<List<Integer>> ans = new ArrayList<>();
//         if(root==null)
//         return ans;

//         Queue<TreeNode> queue=new LinkedList<>();
//         queue.add(root);
//         while(!queue.isEmpty())
//         {
//             List<Integer> values=new ArrayList();
//             List<TreeNode> queueTemp=new LinkedList<>();
//             while(queue.size()>0)
//             {
//                 TreeNode temp = queue.remove();
//                 values.add(temp.val);
//                 if(temp.left!=null)
//                 queueTemp.add(temp.left);
//                 if(temp.right!=null)
//                 queueTemp.add(temp.right);
//             }
//             for(TreeNode node : queueTemp)
//             {
//                 queue.add(node);
//             }
//             ans.add(values);
//         }
//         return ans;
//     }
// }