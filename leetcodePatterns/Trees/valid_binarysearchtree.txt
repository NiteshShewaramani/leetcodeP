https://leetcode.com/problems/validate-binary-search-tree

//simple solution
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }
    public boolean isValidBST(TreeNode root,long min,long max) {
        if(root==null)
        return true;
        if(root.val<=min || root.val>=max)
        {
            return false;
        }
//compare it with value of left and right subtree
        return isValidBST(root.left,min,root.val) && isValidBST(root.right,root.val,max);       
    }
    
}



class Solution {
    public boolean isValidBST(TreeNode root) {
        List<Integer> arrayList=new ArrayList<>();
        if(root==null)
        return true;
        if(root.left==null && root.right==null)
        return true;

        inorder(root,arrayList);
        for(int i=0;i<arrayList.size()-1;i++)
        {
            if(arrayList.get(i)>=arrayList.get(i+1))
            return false;

        }
        return true;
    }
//do inorder traversal and check if array is sorted or not
    private void inorder(TreeNode root,List<Integer> arrayList)
    {
        if(root==null)
        return;

        inorder(root.left,arrayList);
        arrayList.add(root.val);
        inorder(root.right,arrayList);

    }
}