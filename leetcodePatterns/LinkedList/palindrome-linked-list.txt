https://leetcode.com/problems/palindrome-linked-list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    /*
        Approach: Use dual pointer method to get the middle of the linked list. The idea is, have a slow pointer and a fast
                  pointer, and every time move the slow pointer by 1 step, and the fast pointer by 2 steps. By the time the 
                  fast pointer reaches the end of the list, the slow pointer will reach the middle of the list.
                  Also, while we're finding the middle, reverse the slow pointer nodes, essentially reversing the first half
                  of the linked list.
                  Now have two pointers at the middle of the linked list pointing to each half. For linked list with even
                  length like [2,4,5,7] these will start at 4 and 5. For odd length lists like [2,4,5,7,8], these will start
                  at 4 and 7, skipping the middle element.
                  Now traverse both the halves and compare the values.
                  P.S. Here we are modifying the list (next nodes) by reversing the first half to have O(1) space complexity.
                  We could restore the list to its original state by again reversing the first half while comparing with second
                  half, if the problem statement asked us to do so.
                  
        Complexity analysis: Time: O(n), Space: O(1)          
        */
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)
        return true;
        ListNode fast=head;
        ListNode slow=head;
        ListNode reversePointer =head;
        ListNode prev=null;
        while(fast != null && fast.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
            //reversing the forst half of linked list
            ListNode next = reversePointer.next;
            reversePointer.next=prev;
            prev=reversePointer;
            reversePointer=next;

        }

        //found odd node
        if(fast!=null)
        {
            slow=slow.next;
        }
        while(slow!=null && prev!=null)
        {
            if(slow.val != prev.val)
            return false;
            slow=slow.next;
            prev=prev.next;

        }
        return true;
        
        
    }
}