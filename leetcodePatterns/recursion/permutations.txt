https://leetcode.com/problems/permutations/description/
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        recursion(nums,new LinkedHashSet<Integer>());
        return res;        
    }

    private void recursion(int nums[],Set<Integer> set)
    {
        //break
        if(set.size()==nums.length)
        {
            ArrayList<Integer> list=new ArrayList<>(set);
            res.add(list);
            return;
        }
        for(int n:nums)
        {
            if(set.add(n))
            {
                recursion(nums,set);
                set.remove(n);
            }
        }
    } 
}


List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        // LinkedList<Integer> track = new LinkedList<>();
        // boolean[] used = new boolean[nums.length];
        // backTrack(nums,track,used);
        // //to print all numbers
        // // for (List<Integer> re : res) {
        // //     for (Integer integer : re) {
        // //         System.out.print(integer + " ");
        // //     }
        // //     System.out.println();
        // // }
        // return res;
        
    }
    
    
    // private void backTrack(int[] nums,LinkedList<Integer> track,boolean[] used) {
    //     if(track.size() == nums.length) {
    //         res.add(new ArrayList<>(track));
    //         return;
    //     }
    //     for (int i = 0; i < nums.length; i++) {
    //         if (used[i]) {
    //             continue;
    //         }
    //         track.add(nums[i]);
    //         used[i] = true;
    //         backTrack(nums,track,used);
    //         used[i] = false;
    //         track.removeLast();
    //     }
    // }