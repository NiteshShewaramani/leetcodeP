https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/
//using stringbuilder improves performance - 1ms
class Solution {
    List<String> ans= new ArrayList<>();
    String arr[]=new String[]{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        if(digits.length()==0)
        return ans;

        recursion(digits,new StringBuilder(),0);
        return ans;       
    }

    public void recursion(String digits,StringBuilder  sb,int start)
    {
        if(sb.length()==digits.length())
        {
            ans.add(sb.toString());
            return;
        }
        for(int i=start;i<digits.length();i++)
        {
            String di = "" + digits.charAt(i);
            int dialno=Integer.parseInt(di);
            String value = arr[dialno];
            for(int j=0;j<value.length();j++)
            {
            recursion(digits,new StringBuilder(sb).append(value.charAt(j)),i+1);                
            }
        }
    }
}


//own solution  - 6ms
class Solution {
    List<String> ans= new ArrayList<>();
    String arr[]=new String[]{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        if(digits.length()==0)
        return ans;

        recursion(digits,"",0);
        return ans;       
    }

    public void recursion(String digits,String str,int start)
    {
        if(str.length()==digits.length())
        {
            ans.add(str);
            return;
        }
        for(int i=start;i<digits.length();i++)
        {
            String di = "" + digits.charAt(i);
            int dialno=Integer.parseInt(di);
            String value = arr[dialno];
            for(int j=0;j<value.length();j++)
            {
                str=str+value.charAt(j);
                recursion(digits,str,i+1);
                str=str.substring(0,str.length()-1);
            }
        }
    }
}