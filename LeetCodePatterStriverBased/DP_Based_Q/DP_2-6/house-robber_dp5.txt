https://leetcode.com/problems/house-robber/description/
class Solution {
    public int rob(int[] nums) {
        int prev2=0;
        int prev1=nums[0];
        int taken,notTaken=0;
        for(int ind=1;ind<nums.length;ind++)
        {
            taken = nums[ind];
            if(ind>1)
            {
                taken = taken + prev2;
            }
            notTaken=prev1;
            int current=Math.max(taken,notTaken);

            prev2=prev1;
            prev1=current;
        }
        return prev1;  
    }
    //tabular solution
    // public int rob(int[] nums) {
    //     int dp[]=new int [nums.length];

    //     Arrays.fill(dp,-1);
    //     //return calculate(0,nums,dp);
    //     dp[0]=nums[0];
    //     int taken=0;
    //     int notTaken=0;

    //     for(int ind=1;ind<nums.length;ind++)
    //     {
    //         notTaken = dp[ind-1];
    //         taken = nums[ind];
    //         if(ind>1)
    //         {
    //             taken = taken + dp[ind-2];
    //         }
    //         dp[ind]=Math.max(taken,notTaken);

    //     }
    //     return dp[nums.length-1];  
    // }

    private int memorization(int index,int[] nums,int dp[])
    {
        if(index >= nums.length)
        return 0;

        if(dp[index]!=-1)
        return dp[index];

        
        int notTaken = memorization(index+1,nums,dp);
        int taken = memorization(index+2,nums,dp) + nums[index];

        dp[index] = Math.max(taken,notTaken);

        return dp[index];
    }
}