https://leetcode.com/problems/unique-paths-ii/
class Solution {
    int maxrow=0,maxcol=0;
    public int uniquePathsWithObstaclesMemorization(int[][] obstacleGrid) {
        maxrow=obstacleGrid.length;
        maxcol=obstacleGrid[0].length;
        if(obstacleGrid[maxrow-1][maxcol-1] == 1)
        return 0;
        int dp[][] = new int[maxrow][maxcol];
        for(int row[] : dp)
        Arrays.fill(row,-1);
        return calculate(obstacleGrid,dp,0,0);
    }
    private int calculate(int[][] obstacleGrid,int[][] dp,int m,int n)
    {
        if(m>=maxrow || n>= maxcol)
        return 0;
        else if(m == maxrow -1 && n == maxcol-1)
        return 1;
        else if(obstacleGrid[m][n]==1)
        return 0;
        else if(dp[m][n] != -1)
        return dp[m][n];
        dp[m][n]=calculate(obstacleGrid,dp,m+1,n)+calculate(obstacleGrid,dp,m,n+1);
        return dp[m][n];
    }

    public int uniquePathsWithObstaclesTabular(int[][] obstacleGrid) {
        maxrow=obstacleGrid.length;
        maxcol=obstacleGrid[0].length;
        if(obstacleGrid[maxrow-1][maxcol-1] == 1 || obstacleGrid[0][0]==1)
        return 0;
        int dp[][] = new int[maxrow][maxcol];

        for(int row[] : dp)
        Arrays.fill(row,-1);
        for(int i=0;i<maxrow;i++)
        {
            for(int j=0;j<maxcol;j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j]=1;
                    continue;
                }
                if(obstacleGrid[i][j]==1)
                {
                    dp[i][j]=0;
                    continue;
                }
                int up=0,down=0;
                if(i>0)
                up=dp[i-1][j];
                if(j>0)
                down=dp[i][j-1];

                dp[i][j] = up+down;
            }
        }

        return dp[maxrow-1][maxcol-1];
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        maxrow=obstacleGrid.length;
        maxcol=obstacleGrid[0].length;
        if(obstacleGrid[maxrow-1][maxcol-1] == 1 || obstacleGrid[0][0]==1)
        return 0;

        int prev[] = new int[maxcol];

        for(int i=0;i<maxrow;i++)
        {
            int temp[] = new int[maxcol];
            for(int j=0;j<maxcol;j++)
            {
                if(i==0 && j==0)
                {
                    temp[j]=1;
                    continue;
                }
                if(obstacleGrid[i][j]==1)
                {
                    temp[j]=0;
                    continue;
                }
                int up=0,down=0;
                if(j>=0)
                up=prev[j];
                if(j>0)
                down=temp[j-1];

                temp[j] = up+down;
            }
            prev=temp;
        }

        return prev[maxcol-1];
    }
}