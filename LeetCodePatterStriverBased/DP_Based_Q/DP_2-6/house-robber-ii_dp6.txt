https://leetcode.com/problems/house-robber-ii/

//memorization
class Solution {
    public int rob(int[] nums) {
        if(nums.length==1)
        return nums[0];
        int dp[] = new int[nums.length];
        Arrays.fill(dp,-1);
        int firstTaken =  memorization(0,nums,dp,nums.length-1);
        //we need to reset the dp again
        Arrays.fill(dp,-1);
        int lastTaken = memorization(1,nums,dp,nums.length);
        return Math.max(firstTaken,lastTaken);
        
    }

    private int memorization(int ind,int[] nums,int dp[],int n){
        if(ind>=n)
        return 0;
        if(dp[ind]!=-1)
        return dp[ind];

        int taken = nums[ind] + memorization(ind+2,nums,dp,n);
        int notTaken = memorization(ind+1,nums,dp,n);
        dp[ind] = Math.max(notTaken,taken);
        return dp[ind];
    }
}

//tabular
class Solution {
    public int rob(int[] nums) {
        if(nums.length==1)
        return nums[0];
        int dp[] = new int[nums.length];
        Arrays.fill(dp,-1);
        dp[0]=nums[0];
        int notTaken=0;
        int taken=0;
        //firstTaken
        for(int ind=1;ind<nums.length-1;ind++)
        {
            taken = nums[ind];
            if(ind>1)
            {
               taken =  nums[ind] + dp[ind-2];
            }
            notTaken=dp[ind-1];
            dp[ind]=Math.max(taken,notTaken);
        }
        int ansTakenFirstIndex = dp[nums.length-2];
        //we need to reset the dp again
        Arrays.fill(dp,-1);
        //base case since we are not taking first element need 
        //to mark it as zero otherwise it will affect the count
        dp[0]=0;
        dp[1]=nums[1];
        notTaken=0;
        taken=0;
        //lastTaken
        for(int ind=2;ind<nums.length;ind++)
        {
            taken = nums[ind];
            if(ind>1)
            {
               taken =  nums[ind] + dp[ind-2];
            }
            notTaken=dp[ind-1];
            dp[ind]=Math.max(taken,notTaken);
        }
         int ansTakenLastIndex = dp[nums.length-1];
        return Math.max(ansTakenFirstIndex,ansTakenLastIndex);
    }
}

//space optimized
class Solution {
    public int rob(int[] nums) {
        if(nums.length==1)
        return nums[0];

        int prev1=0,prev2=0;
        prev1=nums[0];
        int notTaken=0;
        int taken=0;
        //firstTaken
        for(int ind=1;ind<nums.length-1;ind++)
        {
            taken = nums[ind];
            if(ind>1)
            {
               taken =  nums[ind] + prev2;
            }
            notTaken=prev1;
            int current=Math.max(taken,notTaken);
            prev2=prev1;
            prev1=current;
        }
        int ansTakenFirstIndex = prev1;
        prev1=nums[1];
        prev2=0;
        notTaken=0;
        taken=0;
        //lastTaken
        for(int ind=2;ind<nums.length;ind++)
        {
            taken = nums[ind];
            if(ind>1)
            {
               taken =  nums[ind] + prev2;
            }
            notTaken=prev1;
            int current = Math.max(taken,notTaken);
            prev2=prev1;
            prev1=current;
        }
         int ansTakenLastIndex = prev1;
        return Math.max(ansTakenFirstIndex,ansTakenLastIndex);
    }
}