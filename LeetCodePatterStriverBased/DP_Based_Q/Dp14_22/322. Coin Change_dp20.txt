322. Coin Change
class Solution {
    public int calculate(int amount,int[] coins,int ind,int[][] dp)
    {
        if(ind==0)
        {
            if(amount%coins[ind]==0)
            return amount/coins[ind];
            else
            return (int) Math.pow(10, 9);
        }

        if (dp[ind][amount] != -1)
            return dp[ind][amount];

        int notTaken = 0 + calculate(amount,coins,ind-1,dp);
        int taken = (int) Math.pow(10, 9);
        if(coins[ind]<=amount)
        {
            taken = 1 +
            calculate(amount-coins[ind],coins,ind,dp);

        }
        dp[ind][amount] = Math.min(notTaken,taken);
        return dp[ind][amount];

    }
    public int coinChange(int[] coins, int amount) {
        int l=coins.length;
        Arrays.sort(coins);
        int dp[][] = new int[l][amount+1];

        for(int row[] : dp)
        {
            Arrays.fill(row,-1);
        }

        int ans = calculate(amount,coins,l-1,dp);

         if (ans >= (int) Math.pow(10, 9))
            return -1;
        return ans;
        
    }

    public int coinChangeTabu(int[] coins, int amount) {
        int l=coins.length;
        int dp[][] = new int[l][amount+1];

        //first base condition
        //in the base case for recursion 
        //when we are using divide the ind is always 0
        //so here also we will divide by coins[0]
        //and Target or amount is not the original amount it can be anything between
        //the actual amount and 0
        for(int col=0;col<=amount;col++)
        {
            if (col % coins[0] == 0)
                dp[0][col] = col / coins[0];
            else
                dp[0][col] = (int) Math.pow(10, 9);
        }
        for(int r=1;r<l;r++)
        {
            for(int c=0;c<=amount;c++)
            {
                int notTaken = 0 + dp[r-1][c];
                int taken = (int) Math.pow(10, 9);
                if(coins[r]<=c)
                {
                    taken = 1 + dp[r][c-coins[r]];
                }
                dp[r][c] = Math.min(notTaken,taken);
            }
        }
        int ans = dp[l-1][amount];
         if (ans >= (int) Math.pow(10, 9))
            return -1;
        return ans;
    }

    public int coinChangeOptimized(int[] coins, int amount) { 
        return minimumElements(coins,amount);  
    }


    int minimumElements(int[] arr, int T) {
        int n = arr.length;

        // Create two arrays to store results of subproblems: prev and cur
        int prev[] = new int[T + 1];
        int cur[] = new int[T + 1];

        // Initialize the prev array for the first element of the array
        for (int i = 0; i <= T; i++) {
            if (i % arr[0] == 0)
                prev[i] = i / arr[0];
            else
                prev[i] = (int) Math.pow(10, 9);
        }

        // Fill the cur array using dynamic programming
        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= T; target++) {
                int notTake = 0 + prev[target];
                int take = (int) Math.pow(10, 9);

                // If the current element is less than or equal to 
                //the target, calculate 'take'
                if (arr[ind] <= target)
                    take = 1 + cur[target - arr[ind]];

                // Store the minimum result in the cur array
                cur[target] = Math.min(notTake, take);
            }

            // Update prev with cur for the next iteration
            prev = cur.clone();
        }

        // Get the minimum number of elements needed for the target sum
        int ans = prev[T];

        // If it's not possible to achieve the target sum, return -1
        if (ans >= (int) Math.pow(10, 9))
            return -1;
        return ans;
    }
}